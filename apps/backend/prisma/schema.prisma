// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(nanoid())
  email     String    @unique
  username  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  history   History[]
  mood      Mood[]
  profile   Profile?
}

enum Platform {
  YOUTUBE
  SPOTIFY
}

model History {
  id         String   @id @default(nanoid())
  title      String
  artist     String
  platform   Platform
  type       String[]
  createdAt  DateTime @default(now())
  isFavorite Boolean  @default(false)
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Mood {
  id        String   @id @default(nanoid())
  mood      String
  genre     String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Profile {
  id        String  @id @default(nanoid())
  mbti      String
  astrology String
  userId    String? @unique
  User      User?   @relation(fields: [userId], references: [id])
}

model SpotifyAccount {
  id           String @id @default(cuid())
  userId       String @unique
  accessToken  String
  refreshToken String
  expiresAt    BigInt
}

model UserRecommendation {
  id        String   @id @default(cuid())
  userId    String
  mood      String
  genre     String
  timestamp DateTime
  songs     Json
  albums    Json
}

model UserFavorite {
  id          String   @id @default(cuid())
  userId      String
  itemId      String
  itemType    String // 'song' | 'album'
  itemDetails Json
  addedAt     DateTime @default(now())
}
